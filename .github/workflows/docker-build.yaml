name: Build and Push Docker Image to Artifact Registry

on:
  schedule:
    - cron: "17 9 * * *"  # Run daily at 2:17 AM Pacific (9:17 AM UTC)
  workflow_dispatch:
    inputs:
      build_type:
        description: "Type of build to run"
        required: true
        default: "nightly"
        type: choice
        options:
          - nightly
          - release
      branch:
        description: "Branch to build from (for nightly builds)"
        required: false
        default: "main"
      commit:
        description: "Specific commit to build (for nightly builds)"
        required: false
        default: ""
      release_tag:
        description: "Specific release tag to build (for release builds)"
        required: false
        default: ""
      add_standard_tags:
        description: "Add standard tags (nightly/latest, date-based for nightly)"
        required: false
        type: boolean
        default: false

jobs:
  # Check for updates and determine what to build
  check_updates:
    runs-on: ubuntu-latest
    outputs:
      should_build_nightly: ${{ steps.check.outputs.should_build_nightly }}
      should_build_release: ${{ steps.check.outputs.should_build_release }}
      nightly_commit: ${{ steps.check.outputs.nightly_commit }}
      release_tag: ${{ steps.check.outputs.release_tag }}
      nightly_branch: ${{ steps.check.outputs.nightly_branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for updates
        id: check
        run: |
          # Initialize variables
          SHOULD_BUILD_NIGHTLY="false"
          SHOULD_BUILD_RELEASE="false"
          NIGHTLY_COMMIT=""
          RELEASE_TAG=""
          NIGHTLY_BRANCH="main"
          
          # For manual runs, use the specified parameters
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Manual workflow run detected"
            
            if [ "${{ github.event.inputs.build_type }}" == "nightly" ]; then
              echo "Manual nightly build requested"
              SHOULD_BUILD_NIGHTLY="true"
              NIGHTLY_BRANCH="${{ github.event.inputs.branch || 'main' }}"
              
              if [ -n "${{ github.event.inputs.commit }}" ]; then
                NIGHTLY_COMMIT="${{ github.event.inputs.commit }}"
                echo "Using specified commit: $NIGHTLY_COMMIT"
              else
                # Get latest commit from specified branch
                NIGHTLY_COMMIT=$(curl -s https://api.github.com/repos/pelican-dev/panel/commits/$NIGHTLY_BRANCH | jq -r '.sha')
                echo "Using latest commit from $NIGHTLY_BRANCH: $NIGHTLY_COMMIT"
              fi
            elif [ "${{ github.event.inputs.build_type }}" == "release" ]; then
              echo "Manual release build requested"
              SHOULD_BUILD_RELEASE="true"
              
              if [ -n "${{ github.event.inputs.release_tag }}" ]; then
                RELEASE_TAG="${{ github.event.inputs.release_tag }}"
                echo "Using specified release tag: $RELEASE_TAG"
              else
                # Get latest release tag
                RELEASE_TAG=$(curl -s https://api.github.com/repos/pelican-dev/panel/releases/latest | jq -r '.tag_name')
                echo "Using latest release tag: $RELEASE_TAG"
              fi
            fi
          else
            echo "Scheduled workflow run detected"
            
            # Check for new commits on main branch
            LATEST_COMMIT=$(curl -s https://api.github.com/repos/pelican-dev/panel/commits/main | jq -r '.sha')
            echo "Latest commit on main: $LATEST_COMMIT"
            
            if [ -f ".last_built_commit" ]; then
              LAST_BUILT_COMMIT=$(cat .last_built_commit)
              if [ "$LATEST_COMMIT" != "$LAST_BUILT_COMMIT" ]; then
                echo "New commit detected, will build nightly"
                SHOULD_BUILD_NIGHTLY="true"
                NIGHTLY_COMMIT="$LATEST_COMMIT"
              else
                echo "No new commits since last build"
              fi
            else
              echo "No record of previous builds, will build nightly"
              SHOULD_BUILD_NIGHTLY="true"
              NIGHTLY_COMMIT="$LATEST_COMMIT"
            fi
            
            # Check for new releases
            LATEST_RELEASE=$(curl -s https://api.github.com/repos/pelican-dev/panel/releases/latest | jq -r '.tag_name')
            echo "Latest release: $LATEST_RELEASE"
            
            if [ -f ".last_built_release" ]; then
              LAST_BUILT_RELEASE=$(cat .last_built_release)
              if [ "$LATEST_RELEASE" != "$LAST_BUILT_RELEASE" ] && [ "$LATEST_RELEASE" != "null" ]; then
                echo "New release detected, will build release"
                SHOULD_BUILD_RELEASE="true"
                RELEASE_TAG="$LATEST_RELEASE"
              else
                echo "No new releases since last build"
              fi
            elif [ "$LATEST_RELEASE" != "null" ]; then
              echo "No record of previous releases, will build release"
              SHOULD_BUILD_RELEASE="true"
              RELEASE_TAG="$LATEST_RELEASE"
            fi
          fi
          
          # Output the results
          echo "should_build_nightly=$SHOULD_BUILD_NIGHTLY" >> $GITHUB_OUTPUT
          echo "should_build_release=$SHOULD_BUILD_RELEASE" >> $GITHUB_OUTPUT
          echo "nightly_commit=$NIGHTLY_COMMIT" >> $GITHUB_OUTPUT
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "nightly_branch=$NIGHTLY_BRANCH" >> $GITHUB_OUTPUT
          
          # Summary
          echo "Build summary:"
          echo "- Build nightly: $SHOULD_BUILD_NIGHTLY"
          echo "- Build release: $SHOULD_BUILD_RELEASE"
          echo "- Nightly commit: $NIGHTLY_COMMIT"
          echo "- Release tag: $RELEASE_TAG"
          echo "- Branch: $NIGHTLY_BRANCH"

  # Build and push nightly Docker image
  build_nightly:
    needs: check_updates
    if: ${{ needs.check_updates.outputs.should_build_nightly == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: "write"
      id-token: "write"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: "${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ secrets.SERVICE_ACCOUNT_EMAIL }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-docker.pkg.dev --quiet

      - name: Set build parameters
        id: params
        run: |
          # Get current date in YYYYMMDD format
          DATE_TAG=$(date +'%Y%m%d')
          COMMIT="${{ needs.check_updates.outputs.nightly_commit }}"
          
          echo "Building nightly from commit: $COMMIT"
          
          # Set tags based on user preference
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.add_standard_tags }}" != "true" ]; then
            # For manual builds without standard tags, just use the commit SHA
            DOCKER_TAGS="us-docker.pkg.dev/pelican-gcr/pelican/panel:commit-$COMMIT"
            echo "Using only commit-based tag for manual build"
          else
            # For scheduled builds or when standard tags are requested, use all tags
            DOCKER_TAGS="us-docker.pkg.dev/pelican-gcr/pelican/panel:nightly,us-docker.pkg.dev/pelican-gcr/pelican/panel:commit-$COMMIT,us-docker.pkg.dev/pelican-gcr/pelican/panel:nightly-$DATE_TAG"
            echo "Using all standard tags"
          fi
          
          echo "docker_tags=$DOCKER_TAGS" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.params.outputs.docker_tags }}
          build-args: |
            REPO_URL=https://github.com/pelican-dev/panel.git
            REPO_BRANCH=${{ needs.check_updates.outputs.nightly_branch }}
            REPO_COMMIT=${{ needs.check_updates.outputs.nightly_commit }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Store latest commit hash
        # Only update tracking file for scheduled builds, not manual builds
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: |
          echo "${{ needs.check_updates.outputs.nightly_commit }}" > .last_built_commit
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .last_built_commit
          git commit -m "Update last built commit [skip ci]" || echo "No changes to commit"
          git push

  # Build and push release Docker image
  build_release:
    needs: check_updates
    if: ${{ needs.check_updates.outputs.should_build_release == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: "write"
      id-token: "write"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: "${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ secrets.SERVICE_ACCOUNT_EMAIL }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-docker.pkg.dev --quiet

      - name: Set build parameters
        id: params
        run: |
          RELEASE_TAG="${{ needs.check_updates.outputs.release_tag }}"
          
          echo "Building release: $RELEASE_TAG"
          
          # Set tags based on user preference
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.add_standard_tags }}" != "true" ]; then
            # For manual builds without standard tags, just use the version tag
            DOCKER_TAGS="us-docker.pkg.dev/pelican-gcr/pelican/panel:$RELEASE_TAG"
            echo "Using only version tag for manual build"
          else
            # For scheduled builds or when standard tags are requested, include latest tag
            DOCKER_TAGS="us-docker.pkg.dev/pelican-gcr/pelican/panel:latest,us-docker.pkg.dev/pelican-gcr/pelican/panel:$RELEASE_TAG"
            echo "Using version and latest tags"
          fi
          
          echo "docker_tags=$DOCKER_TAGS" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.params.outputs.docker_tags }}
          build-args: |
            REPO_URL=https://github.com/pelican-dev/panel.git
            REPO_BRANCH=main
            REPO_COMMIT=${{ needs.check_updates.outputs.release_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Store latest release tag
        # Only update tracking file for scheduled builds, not manual builds
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: |
          echo "${{ needs.check_updates.outputs.release_tag }}" > .last_built_release
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .last_built_release
          git commit -m "Update last built release [skip ci]" || echo "No changes to commit"
          git push